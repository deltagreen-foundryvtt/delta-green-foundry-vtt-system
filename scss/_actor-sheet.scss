@use "vars" as *;

@mixin grid-styles($start: 1, $end: 12) {
  .grid {
    display: grid;
    grid-column: span 2 / span 2;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    gap: 3px;
  }

  @for $i from $start through $end {
    .grid-#{$i}col {
      grid-column: span #{$i} / span #{$i};
      grid-template-columns: repeat(#{$i}, minmax(0, 1fr));
    }
  }
}

.#{$system-id}.actor {
  .window-content {
    .sheet-header {
      display: flex;
      overflow: hidden;

      flex: 0 0 auto;
      flex-direction: row;
      flex-wrap: wrap;
      display: flex;
      justify-content: flex-start;

      margin-bottom: 8px;

      .header-top {
        margin-bottom: 5px;

        .profile-img {
          height: 100px;
          flex: 0 0 100px;

          cursor: var(--cursor-pointer); /* Variable name from Foundry */

          border: 1px solid black;
          margin-right: 5px;
        }

        h1.charname {
          height: 55px;

          font-family: inherit;
          font-size: 2rem;

          padding: 0px;
          border-bottom: 0;
          margin-bottom: 0;
        }

        h2.profession {
          font-family: inherit;
          font-size: 1.5rem;
          border-bottom: 0;
          margin-top: 5px;
          margin-bottom: 0;

          input {
            width: 100%;
            height: 40px;
            margin: 0;
          }
        }
      }
    }

    @include grid-styles;

    // If the user wishes to sort skills by column, we need to
    // explicitly define a number of rows, rather than columns.
    .grid-13row {
      grid-template-rows: repeat(13, minmax(0, auto)) !important;
      grid-template-columns: repeat(auto-fit, minmax(0, 1fr)) !important;
      grid-auto-flow: column !important;
    }
  }
}
